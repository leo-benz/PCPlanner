/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.CountryResponse
import org.openapitools.client.models.LanguageResponse
import org.openapitools.client.models.SubdivisionResponse

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

open class RegionalApi : ApiClient {

    constructor(
        baseUrl: String = ApiClient.BASE_URL,
        httpClientEngine: HttpClientEngine? = null,
        httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
        jsonSerializer: Json = ApiClient.JSON_DEFAULT
    ) : super(baseUrl = baseUrl, httpClientEngine = httpClientEngine, httpClientConfig = httpClientConfig, jsonBlock = jsonSerializer)

    constructor(
        baseUrl: String,
        httpClient: HttpClient
    ): super(baseUrl = baseUrl, httpClient = httpClient)

    /**
     * Returns a list of all supported countries
     * 
     * @param languageIsoCode ISO-639-1 code of a language or empty (optional)
     * @return kotlin.collections.List<CountryResponse>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun countriesGet(languageIsoCode: kotlin.String? = null): HttpResponse<kotlin.collections.List<CountryResponse>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        languageIsoCode?.apply { localVariableQuery["languageIsoCode"] = listOf("$languageIsoCode") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/Countries",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<CountriesGetResponse>().map { value }
    }

    @Serializable(CountriesGetResponse.Companion::class)
    private class CountriesGetResponse(val value: List<CountryResponse>) {
        companion object : KSerializer<CountriesGetResponse> {
            private val serializer: KSerializer<List<CountryResponse>> = serializer<List<CountryResponse>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: CountriesGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = CountriesGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Returns a list of all used languages
     * 
     * @param languageIsoCode ISO-639-1 code of a language or empty (optional)
     * @return kotlin.collections.List<LanguageResponse>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun languagesGet(languageIsoCode: kotlin.String? = null): HttpResponse<kotlin.collections.List<LanguageResponse>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        languageIsoCode?.apply { localVariableQuery["languageIsoCode"] = listOf("$languageIsoCode") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/Languages",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<LanguagesGetResponse>().map { value }
    }

    @Serializable(LanguagesGetResponse.Companion::class)
    private class LanguagesGetResponse(val value: List<LanguageResponse>) {
        companion object : KSerializer<LanguagesGetResponse> {
            private val serializer: KSerializer<List<LanguageResponse>> = serializer<List<LanguageResponse>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: LanguagesGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = LanguagesGetResponse(serializer.deserialize(decoder))
        }
    }

    /**
     * Returns a list of relevant subdivisions for a supported country (if any)
     * 
     * @param countryIsoCode ISO 3166-1 code of the country
     * @param languageIsoCode ISO-639-1 code of a language or empty (optional)
     * @return kotlin.collections.List<SubdivisionResponse>
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun subdivisionsGet(countryIsoCode: kotlin.String, languageIsoCode: kotlin.String? = null): HttpResponse<kotlin.collections.List<SubdivisionResponse>> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        countryIsoCode?.apply { localVariableQuery["countryIsoCode"] = listOf("$countryIsoCode") }
        languageIsoCode?.apply { localVariableQuery["languageIsoCode"] = listOf("$languageIsoCode") }
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/Subdivisions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap<SubdivisionsGetResponse>().map { value }
    }

    @Serializable(SubdivisionsGetResponse.Companion::class)
    private class SubdivisionsGetResponse(val value: List<SubdivisionResponse>) {
        companion object : KSerializer<SubdivisionsGetResponse> {
            private val serializer: KSerializer<List<SubdivisionResponse>> = serializer<List<SubdivisionResponse>>()
            override val descriptor = serializer.descriptor
            override fun serialize(encoder: Encoder, obj: SubdivisionsGetResponse) = serializer.serialize(encoder, obj.value)
            override fun deserialize(decoder: Decoder) = SubdivisionsGetResponse(serializer.deserialize(decoder))
        }
    }

}
